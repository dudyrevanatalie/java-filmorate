DROP TABLE IF EXISTS friendships CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS film_genre CASCADE;
DROP TABLE IF EXISTS genre CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;

CREATE TABLE IF NOT EXISTS mpa (
    mpa_id INTEGER   NOT NULL,
    mpa_name VARCHAR(10)   NOT NULL,
    CONSTRAINT pk_rating PRIMARY KEY (mpa_id)
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100),
    description VARCHAR(300),
    release_date VARCHAR(10),
    duration INTEGER,
    mpa_id INTEGER,
    CONSTRAINT fk_film_mpa_id FOREIGN KEY(mpa_id) REFERENCES mpa (mpa_id)
);

CREATE TABLE IF NOT EXISTS genre (
    genre_id int   NOT NULL,
    genre_name varchar   NOT NULL,
    CONSTRAINT pk_genre PRIMARY KEY (genre_id)
);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id int   NOT NULL,
    genre_id int   NOT NULL,
    CONSTRAINT fk_film_genre_film_id FOREIGN KEY(film_id) REFERENCES films (film_id),
    CONSTRAINT fk_film_genre_genre_id FOREIGN KEY(genre_id) REFERENCES genre (genre_id)
);

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(100),
    login VARCHAR(100),
    name VARCHAR(100),
    birthday VARCHAR
);

CREATE TABLE IF NOT EXISTS likes (
    user_id int   NOT NULL,
    film_id int   NOT NULL,
    CONSTRAINT pk_like PRIMARY KEY (user_id),
    CONSTRAINT fk_like_user_id FOREIGN KEY(user_id) REFERENCES users (user_id),
    CONSTRAINT fk_like_film_id FOREIGN KEY(film_id) REFERENCES films (film_id)
);

CREATE TABLE IF NOT EXISTS friendships (
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    status VARCHAR(40) NOT NULL,
    CONSTRAINT fk_user_id FOREIGN KEY(user_id) REFERENCES users (user_id),
    CONSTRAINT fk_friend_id FOREIGN KEY(friend_id) REFERENCES users (user_id)
);

